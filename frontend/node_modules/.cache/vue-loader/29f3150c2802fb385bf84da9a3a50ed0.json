{"remainingRequest":"/home/pi/Dev/djangostation2/frontend/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/pi/Dev/djangostation2/frontend/src/components/Chart.vue?vue&type=style&index=0&id=4d06a4de&lang=scss&scoped=true","dependencies":[{"path":"/home/pi/Dev/djangostation2/frontend/src/components/Chart.vue","mtime":1646980814000},{"path":"/home/pi/Dev/djangostation2/frontend/node_modules/css-loader/dist/cjs.js","mtime":1645891061792},{"path":"/home/pi/Dev/djangostation2/frontend/node_modules/vue-loader-v16/dist/stylePostLoader.js","mtime":1645891048883},{"path":"/home/pi/Dev/djangostation2/frontend/node_modules/postcss-loader/src/index.js","mtime":1645891051033},{"path":"/home/pi/Dev/djangostation2/frontend/node_modules/sass-loader/dist/cjs.js","mtime":1645891047953},{"path":"/home/pi/Dev/djangostation2/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1645891062892},{"path":"/home/pi/Dev/djangostation2/frontend/node_modules/vue-loader-v16/dist/index.js","mtime":1645891046373}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouY2hhcnQgew0KICBtYXJnaW46IGF1dG87DQogIHdpZHRoOiA2MCU7DQp9DQo="},{"version":3,"sources":["/home/pi/Dev/djangostation2/frontend/src/components/Chart.vue"],"names":[],"mappings":";AA6JA,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE;EACL,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACZ","file":"/home/pi/Dev/djangostation2/frontend/src/components/Chart.vue","sourceRoot":"","sourcesContent":["<template>\r\n  <div class=\"chart\">\r\n    <highcharts\r\n      :constructorType=\"'stockChart'\"\r\n      class=\"hc\"\r\n      :options=\"chartOptions\"\r\n      ref=\"chart\"\r\n    ></highcharts>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  props: {\r\n    sensor: Object,\r\n    s_id: Number,\r\n  },\r\n  methods: {\r\n    getData() {\r\n      fetch(\"http://192.168.8.184:8000/api-settings/settings/\")\r\n        .then((response) => response.json())\r\n        .then((data) => (this.settings = data))\r\n        .then(() => {\r\n          for (let i in this.settings) {\r\n            let sensor_group = JSON.parse(this.settings[i][\"list_of_indexes\"]);\r\n            for (let n in sensor_group)\r\n              if (\r\n                this.s_id == sensor_group[n].station_index &&\r\n                this.sensor.index == sensor_group[n].sensor_index\r\n              ) {\r\n                console.log(this.settings[i].chart_settings);\r\n                // this.chartOptions.yAxis.max = this.settings[i].chart_settings.max_error_value;\r\n                //    this.chartOptions.yAxis.min = this.settings[i].chart_settings.min_error_value;\r\n                \r\n                this.chartOptions.plotOptions.series.color = this.settings[i].chart_settings.chart_color;\r\n                \r\n              \r\n                break;\r\n              }\r\n          }\r\n            let list = this.formatData();\r\n                this.chartOptions.series[0].data = list;\r\n        })\r\n        .catch((err) => console.log(err));\r\n    },\r\n    formatData() {\r\n     var list = new Array();\r\n      for (let i in this.sensor.values) {\r\n        let date = new Date(this.sensor.values[i][\"date_created\"]).getTime();\r\n        list[i] = [date, this.sensor.values[i][\"value\"]];\r\n      }\r\n     return list;\r\n     \r\n    },\r\n  },\r\n  mounted() {\r\n    this.getData();\r\n\r\n  },\r\n  data() {\r\n    return {\r\n      settings: Object,\r\n\r\n      chartOptions: {\r\n        chart: {\r\n          type: \"spline\",\r\n          events: {},\r\n        },\r\n        rangeSelector: {\r\n          buttons: [\r\n            {\r\n              type: \"hour\",\r\n              count: 1,\r\n              text: \"1H\",\r\n            },\r\n            {\r\n              type: \"hour\",\r\n              count: 6,\r\n              text: \"6H\",\r\n            },\r\n            {\r\n              type: \"day\",\r\n              count: 1,\r\n              text: \"1D\",\r\n            },\r\n            {\r\n              type: \"all\",\r\n              count: 1,\r\n              text: \"All\",\r\n            },\r\n          ],\r\n          selected: 4,\r\n          inputEnabled: false,\r\n        },\r\n        navigator: {\r\n          enabled: false,\r\n        },\r\n        scrollbar: {\r\n          enabled: false,\r\n        },\r\n        title: {\r\n          text: \"\",\r\n        },\r\n        xAxis: {\r\n          type: \"datetime\",\r\n        },\r\n        tooltip: {\r\n          xDateFormat: \"%Y-%m-%d %H:%M:%S\",\r\n        },\r\n        yAxis: {\r\n          title: {\r\n            text: this.sensor.type,\r\n          },\r\n          opposite: false,\r\n        },\r\n        plotOptions: {\r\n          series: {\r\n            \r\n          },\r\n          spline: {\r\n            dataLabels: {\r\n              enabled: false,\r\n            },\r\n            enableMouseTracking: true,\r\n          },\r\n        },\r\n        credits: {\r\n          enabled: false,\r\n        },\r\n        series: [\r\n          {\r\n            name: this.sensor.type,\r\n            dataGrouping: {\r\n              enabled: false,\r\n            },\r\n          },\r\n        ],\r\n        exporting: {\r\n          buttons: {\r\n            contextButton: {\r\n              menuItems: [\r\n                \"printChart\",\r\n                \"downloadPNG\",\r\n                \"downloadJPEG\",\r\n                \"downloadPDF\",\r\n                \"downloadSVG\",\r\n              ],\r\n            },\r\n          },\r\n        },\r\n      },\r\n    };\r\n  },\r\n};\r\n</script>\r\n\r\n<style lang=\"scss\" scoped>\r\n.chart {\r\n  margin: auto;\r\n  width: 60%;\r\n}\r\n</style>"]}]}